var documenterSearchIndex = {"docs":
[{"location":"#SortedSequences","page":"Home","title":"SortedSequences","text":"","category":"section"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Base.insert!-Union{Tuple{T}, Tuple{NonDecreasingVector{T}, Integer, T}} where T","page":"Home","title":"Base.insert!","text":"insert!(v, index, item)\n\nThe Base.Insert! function is extended to operate on NonDecreasingVector and IncreasingVector. An argument-error will be thrown if the item leads to an unsorted sequence.\n\nExamples:\n\njulia> v = NonDecreasingVector([1,2,3,4]);\n\njulia> insert!(v, 3, 2)\n5-element Vector{Int64}:\n 1\n 2\n 2\n 3\n 4\n\njulia> v = IncreasingVector([1,2,4,5]);\n\njulia> insert!(v, 3, 3)\n5-element Vector{Int64}:\n 1\n 2\n 3\n 4\n 5\n\n\n\n\n\n","category":"method"},{"location":"#SortedSequences.construct_vector-Union{Tuple{T}, Tuple{AbstractVector{T}, Vector{Int64}}} where T","page":"Home","title":"SortedSequences.construct_vector","text":"construct_vector(u, m)\n\nConstruct a vector by repeating the elements in u m times.\n\nExamples:\n\njulia> u = [0.0,1.0,2.5,3.0]\n4-element Vector{Float64}:\n 0.0\n 1.0\n 2.5\n 3.0\n\njulia> m = [2,1,2,3]\n4-element Vector{Int64}:\n 2\n 1\n 2\n 3\n\njulia> construct_vector(u, m)\n8-element Vector{Float64}:\n 0.0\n 0.0\n 1.0\n 2.5\n 2.5\n 3.0\n 3.0\n 3.0\n\n\n\n\n\n","category":"method"},{"location":"#SortedSequences.deconstruct_vector-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"Home","title":"SortedSequences.deconstruct_vector","text":"deconstruct_vector(v)\n\nDecompose a sequence into a new sequence, a multiplicity vector, and vectors specifying indexing into the sequence.\n\nExamples:\n\njulia> v = [0.0,0.0,1.0,2.0,2.0,3.0,3.0,3.0];\n\njulia> u, m, ia, ic = deconstruct_vector(v)\n([0.0, 1.0, 2.0, 3.0], [2, 1, 2, 3], [1, 1, 2, 3, 3, 4, 4, 4], [2, 3, 5, 8])\n\njulia> construct_vector(u,m)==v\ntrue\n\njulia> u[ia]==v\ntrue\n\njulia> v[ic]==u\ntrue\n\n\n\n\n\n\n","category":"method"},{"location":"#SortedSequences.global_insert-Union{Tuple{T}, Tuple{NonDecreasingVector{T}, Int64}} where T","page":"Home","title":"SortedSequences.global_insert","text":"global_insert(v, k)\n\nUniformly subdivide new values into an IncreasingVector or NonDecreasingVector.\n\nExamples:\n\njulia> v = IncreasingVector([0.0,1.0,2.0])\n3-element IncreasingVector{Float64}:\n 0.0\n 1.0\n 2.0\n\njulia> global_insert(v, 3)\n9-element IncreasingVector{Float64}:\n 0.0\n 0.25\n 0.5\n 0.75\n 1.0\n 1.25\n 1.5\n 1.75\n 2.0\n\nWhen applied to a NonDecreasingVector only the non-zero length intervals are subdivided\n\njulia> v = NonDecreasingVector([0.0,0.0,1.0,1.0,2.0])\n5-element NonDecreasingVector{Float64}:\n 0.0\n 0.0\n 1.0\n 1.0\n 2.0\n\njulia> global_insert(v, 3)\n11-element NonDecreasingVector{Float64}:\n 0.0\n 0.0\n 0.25\n 0.5\n 0.75\n 1.0\n 1.0\n 1.25\n 1.5\n 1.75\n 2.0\n\n\n\n\n\n","category":"method"},{"location":"#SortedSequences.IncreasingRange","page":"Home","title":"SortedSequences.IncreasingRange","text":"IncreasingRange{T<:Real}\n\nConstruct an increasing range of real numbers.\n\n\n\n\n\n","category":"type"},{"location":"#SortedSequences.IncreasingSequence","page":"Home","title":"SortedSequences.IncreasingSequence","text":"IncreasingSequence{T}\n\nAbstract type for increasing sequences of real numbers.\n\n\n\n\n\n","category":"type"},{"location":"#SortedSequences.IncreasingVector","page":"Home","title":"SortedSequences.IncreasingVector","text":"IncreasingVector{T<:Real}\n\nConstruct a vector with an increasing set of real numbers.\n\nExamples:\n\nThe element type T is a subtype of Real. Hence it is possible to make IncreasingVector{Int64} as well as IncreasingVector{Float64}\n\njulia> IncreasingVector([0,1,2,3])\n4-element IncreasingVector{Int64}:\n 0\n 1\n 2\n 3\n\njulia> IncreasingVector([0.0,1.0,2.0,3.0])\n4-element IncreasingVector{Float64}:\n 0.0\n 1.0\n 2.0\n 3.0\n\nIt is also possible to extract the unique values of a NonDecreasingVector into an IncreasingVector.\n\njulia> v = NonDecreasingVector([0.0,0.0,1.0,2.0,2.0,3.0,3.0])\n7-element NonDecreasingVector{Float64}:\n 0.0\n 0.0\n 1.0\n 2.0\n 2.0\n 3.0\n 3.0\n\njulia> IncreasingVector(v)\n4-element IncreasingVector{Float64}:\n 0.0\n 1.0\n 2.0\n 3.0\n\n\n\n\n\n","category":"type"},{"location":"#SortedSequences.Interval","page":"Home","title":"SortedSequences.Interval","text":"Interval(a::T, b::T)\n\nCreate an interval from a point a to a point b.\n\n\n\n\n\n","category":"type"},{"location":"#SortedSequences.NonDecreasingSequence","page":"Home","title":"SortedSequences.NonDecreasingSequence","text":"NonDecreasingSequence{T}\n\nAbstract type for non-decreasing sequences of real numbers.\n\n\n\n\n\n","category":"type"},{"location":"#SortedSequences.NonDecreasingVector","page":"Home","title":"SortedSequences.NonDecreasingVector","text":"NonDecreasingVector{T}\n\nConstruct a vector with a non-decreasing set of real numbers.\n\nExamples:\n\njulia> v = NonDecreasingVector([0.0,0.0,1.0,2.0,2.0])\n5-element NonDecreasingVector{Float64}:\n 0.0\n 0.0\n 1.0\n 2.0\n 2.0\n\njulia> u, m = deconstruct_vector(v)\n([0.0, 1.0, 2.0], [2, 1, 2], [1, 1, 2, 3, 3], [2, 3, 5])\n\njulia> u\n3-element IncreasingVector{Float64}:\n 0.0\n 1.0\n 2.0\n\njulia> NonDecreasingVector(u, m) == v\ntrue\n\nIt is also possible to extract the unique values of a NonDecreasingVector into an IncreasingVector.\n\njulia> v = NonDecreasingVector([0.0,0.0,1.0,2.0,2.0,3.0,3.0])\n7-element NonDecreasingVector{Float64}:\n 0.0\n 0.0\n 1.0\n 2.0\n 2.0\n 3.0\n 3.0\n\njulia> IncreasingVector(v)\n4-element IncreasingVector{Float64}:\n 0.0\n 1.0\n 2.0\n 3.0\n\n\n\n\n\n","category":"type"},{"location":"#SortedSequences.SortedSequence","page":"Home","title":"SortedSequences.SortedSequence","text":"SortedSequence{T}\n\nAbstract type for sorted sequences of real numbers.\n\n\n\n\n\n","category":"type"},{"location":"#SortedSequences.Unique","page":"Home","title":"SortedSequences.Unique","text":"Unique(v)\n\nConvenience iterator that lazily returns a tuple with the unique consecutive values and their multiplicities.\n\nExamples:\n\njulia> v = [1,1,3,4,5,5,5,6,6,7];\n\njulia> for item in Unique(v)\n           @show item\n       end\nitem = (1, 2)\nitem = (3, 1)\nitem = (4, 1)\nitem = (5, 3)\nitem = (6, 2)\nitem = (7, 1)\n\n\n\n\n\n","category":"type"}]
}
